--- unix/unix.ml	2013-12-14 14:59:27.000000000 +0100
+++ win32unix/unix.ml	2013-12-07 13:23:20.000000000 +0100
@@ -1,18 +1,25 @@
 (***********************************************************************)
 (*                                                                     *)
 (*                                OCaml                                *)
 (*                                                                     *)
-(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
+(*  Xavier Leroy and Pascal Cuoq, projet Cristal, INRIA Rocquencourt   *)
 (*                                                                     *)
 (*  Copyright 1996 Institut National de Recherche en Informatique et   *)
 (*  en Automatique.  All rights reserved.  This file is distributed    *)
 (*  under the terms of the GNU Library General Public License, with    *)
 (*  the special exception on linking described in file ../../LICENSE.  *)
 (*                                                                     *)
 (***********************************************************************)
 
+(* Initialization *)
+
+external startup: unit -> unit = "win_startup"
+external cleanup: unit -> unit = "win_cleanup"
+
+let _ = startup(); at_exit cleanup
+
 (* Errors *)
 
 type error =
     E2BIG
   | EACCES
@@ -89,87 +96,10 @@
 let _ = Callback.register_exception "Unix.Unix_error"
                                     (Unix_error(E2BIG, "", ""))
 
 external error_message : error -> string = "unix_error_message"
 
-let () =
-  Printexc.register_printer
-    (function
-      | Unix_error (e, s, s') ->
-          let msg = match e with
-          | E2BIG -> "E2BIG"
-          | EACCES -> "EACCES"
-          | EAGAIN -> "EAGAIN"
-          | EBADF -> "EBADF"
-          | EBUSY -> "EBUSY"
-          | ECHILD -> "ECHILD"
-          | EDEADLK -> "EDEADLK"
-          | EDOM -> "EDOM"
-          | EEXIST -> "EEXIST"
-          | EFAULT -> "EFAULT"
-          | EFBIG -> "EFBIG"
-          | EINTR -> "EINTR"
-          | EINVAL -> "EINVAL"
-          | EIO -> "EIO"
-          | EISDIR -> "EISDIR"
-          | EMFILE -> "EMFILE"
-          | EMLINK -> "EMLINK"
-          | ENAMETOOLONG -> "ENAMETOOLONG"
-          | ENFILE -> "ENFILE"
-          | ENODEV -> "ENODEV"
-          | ENOENT -> "ENOENT"
-          | ENOEXEC -> "ENOEXEC"
-          | ENOLCK -> "ENOLCK"
-          | ENOMEM -> "ENOMEM"
-          | ENOSPC -> "ENOSPC"
-          | ENOSYS -> "ENOSYS"
-          | ENOTDIR -> "ENOTDIR"
-          | ENOTEMPTY -> "ENOTEMPTY"
-          | ENOTTY -> "ENOTTY"
-          | ENXIO -> "ENXIO"
-          | EPERM -> "EPERM"
-          | EPIPE -> "EPIPE"
-          | ERANGE -> "ERANGE"
-          | EROFS -> "EROFS"
-          | ESPIPE -> "ESPIPE"
-          | ESRCH -> "ESRCH"
-          | EXDEV -> "EXDEV"
-          | EWOULDBLOCK -> "EWOULDBLOCK"
-          | EINPROGRESS -> "EINPROGRESS"
-          | EALREADY -> "EALREADY"
-          | ENOTSOCK -> "ENOTSOCK"
-          | EDESTADDRREQ -> "EDESTADDRREQ"
-          | EMSGSIZE -> "EMSGSIZE"
-          | EPROTOTYPE -> "EPROTOTYPE"
-          | ENOPROTOOPT -> "ENOPROTOOPT"
-          | EPROTONOSUPPORT -> "EPROTONOSUPPORT"
-          | ESOCKTNOSUPPORT -> "ESOCKTNOSUPPORT"
-          | EOPNOTSUPP -> "EOPNOTSUPP"
-          | EPFNOSUPPORT -> "EPFNOSUPPORT"
-          | EAFNOSUPPORT -> "EAFNOSUPPORT"
-          | EADDRINUSE -> "EADDRINUSE"
-          | EADDRNOTAVAIL -> "EADDRNOTAVAIL"
-          | ENETDOWN -> "ENETDOWN"
-          | ENETUNREACH -> "ENETUNREACH"
-          | ENETRESET -> "ENETRESET"
-          | ECONNABORTED -> "ECONNABORTED"
-          | ECONNRESET -> "ECONNRESET"
-          | ENOBUFS -> "ENOBUFS"
-          | EISCONN -> "EISCONN"
-          | ENOTCONN -> "ENOTCONN"
-          | ESHUTDOWN -> "ESHUTDOWN"
-          | ETOOMANYREFS -> "ETOOMANYREFS"
-          | ETIMEDOUT -> "ETIMEDOUT"
-          | ECONNREFUSED -> "ECONNREFUSED"
-          | EHOSTDOWN -> "EHOSTDOWN"
-          | EHOSTUNREACH -> "EHOSTUNREACH"
-          | ELOOP -> "ELOOP"
-          | EOVERFLOW -> "EOVERFLOW"
-          | EUNKNOWNERR x -> Printf.sprintf "EUNKNOWNERR %d" x in
-          Some (Printf.sprintf "Unix.Unix_error(Unix.%s, %S, %S)" msg s s')
-      | _ -> None)
-
 let handle_unix_error f arg =
   try
     f arg
   with Unix_error(err, fun_name, arg) ->
     prerr_string Sys.argv.(0);
@@ -200,25 +130,29 @@
 
 external execv : string -> string array -> 'a = "unix_execv"
 external execve : string -> string array -> string array -> 'a = "unix_execve"
 external execvp : string -> string array -> 'a = "unix_execvp"
 external execvpe : string -> string array -> string array -> 'a = "unix_execvpe"
-external fork : unit -> int = "unix_fork"
-external wait : unit -> int * process_status = "unix_wait"
+
 external waitpid : wait_flag list -> int -> int * process_status
-   = "unix_waitpid"
+   = "win_waitpid"
 external getpid : unit -> int = "unix_getpid"
-external getppid : unit -> int = "unix_getppid"
-external nice : int -> int = "unix_nice"
+
+let fork () = invalid_arg "Unix.fork not implemented"
+let wait () = invalid_arg "Unix.wait not implemented"
+let getppid () = invalid_arg "Unix.getppid not implemented"
+let nice prio = invalid_arg "Unix.nice not implemented"
 
 (* Basic file input/output *)
 
-type file_descr = int
+type file_descr
+
+external filedescr_of_fd : int -> file_descr = "win_handle_fd"
 
-let stdin = 0
-let stdout = 1
-let stderr = 2
+let stdin = filedescr_of_fd 0
+let stdout = filedescr_of_fd 1
+let stderr = filedescr_of_fd 2
 
 type open_flag =
     O_RDONLY
   | O_WRONLY
   | O_RDWR
@@ -234,14 +168,12 @@
   | O_SHARE_DELETE
   | O_CLOEXEC
 
 type file_perm = int
 
-
 external openfile : string -> open_flag list -> file_perm -> file_descr
            = "unix_open"
-
 external close : file_descr -> unit = "unix_close"
 external unsafe_read : file_descr -> string -> int -> int -> int = "unix_read"
 external unsafe_write : file_descr -> string -> int -> int -> int = "unix_write"
 external unsafe_single_write : file_descr -> string -> int -> int -> int
    = "unix_single_write"
@@ -252,40 +184,37 @@
   else unsafe_read fd buf ofs len
 let write fd buf ofs len =
   if ofs < 0 || len < 0 || ofs > String.length buf - len
   then invalid_arg "Unix.write"
   else unsafe_write fd buf ofs len
-(* write misbehaves because it attempts to write all data by making repeated
-   calls to the Unix write function (see comment in write.c and unix.mli).
-   partial_write fixes this by never calling write twice. *)
 let single_write fd buf ofs len =
   if ofs < 0 || len < 0 || ofs > String.length buf - len
   then invalid_arg "Unix.single_write"
   else unsafe_single_write fd buf ofs len
 
 (* Interfacing with the standard input/output library *)
 
 external in_channel_of_descr : file_descr -> in_channel
-   = "caml_ml_open_descriptor_in"
+   = "win_inchannel_of_filedescr"
 external out_channel_of_descr : file_descr -> out_channel
-   = "caml_ml_open_descriptor_out"
+   = "win_outchannel_of_filedescr"
 external descr_of_in_channel : in_channel -> file_descr
-   = "caml_channel_descriptor"
+   = "win_filedescr_of_channel"
 external descr_of_out_channel : out_channel -> file_descr
-   = "caml_channel_descriptor"
+   = "win_filedescr_of_channel"
 
 (* Seeking and truncating *)
 
 type seek_command =
     SEEK_SET
   | SEEK_CUR
   | SEEK_END
 
 external lseek : file_descr -> int -> seek_command -> int = "unix_lseek"
 
-external truncate : string -> int -> unit = "unix_truncate"
-external ftruncate : file_descr -> int -> unit = "unix_ftruncate"
+let truncate name len = invalid_arg "Unix.truncate not implemented"
+let ftruncate fd len = invalid_arg "Unix.ftruncate not implemented"
 
 (* File statistics *)
 
 type file_kind =
     S_REG
@@ -309,13 +238,14 @@
     st_atime : float;
     st_mtime : float;
     st_ctime : float }
 
 external stat : string -> stats = "unix_stat"
-external lstat : string -> stats = "unix_lstat"
+let lstat = stat
 external fstat : file_descr -> stats = "unix_fstat"
-external isatty : file_descr -> bool = "unix_isatty"
+let isatty fd =
+  match (fstat fd).st_kind with S_CHR -> true | _ -> false
 
 (* Operations on file names *)
 
 external unlink : string -> unit = "unix_unlink"
 external rename : string -> string -> unit = "unix_rename"
@@ -325,12 +255,14 @@
 
 module LargeFile =
   struct
     external lseek : file_descr -> int64 -> seek_command -> int64
        = "unix_lseek_64"
-    external truncate : string -> int64 -> unit = "unix_truncate_64"
-    external ftruncate : file_descr -> int64 -> unit = "unix_ftruncate_64"
+    let truncate name len =
+      invalid_arg "Unix.LargeFile.truncate not implemented"
+    let ftruncate name len =
+      invalid_arg "Unix.LargeFile.ftruncate not implemented"
     type stats =
       { st_dev : int;
         st_ino : int;
         st_kind : file_kind;
         st_perm : file_perm;
@@ -342,11 +274,11 @@
         st_atime : float;
         st_mtime : float;
         st_ctime : float;
       }
     external stat : string -> stats = "unix_stat_64"
-    external lstat : string -> stats = "unix_lstat_64"
+    let lstat = stat
     external fstat : file_descr -> stats = "unix_fstat_64"
   end
 
 (* File permissions and ownership *)
 
@@ -355,60 +287,85 @@
   | W_OK
   | X_OK
   | F_OK
 
 external chmod : string -> file_perm -> unit = "unix_chmod"
-external fchmod : file_descr -> file_perm -> unit = "unix_fchmod"
-external chown : string -> int -> int -> unit = "unix_chown"
-external fchown : file_descr -> int -> int -> unit = "unix_fchown"
-external umask : int -> int = "unix_umask"
+let fchmod fd perm = invalid_arg "Unix.fchmod not implemented"
+let chown file perm = invalid_arg "Unix.chown not implemented"
+let fchown fd perm = invalid_arg "Unix.fchown not implemented"
+let umask msk = invalid_arg "Unix.umask not implemented"
+
 external access : string -> access_permission list -> unit = "unix_access"
 
 (* Operations on file descriptors *)
 
 external dup : file_descr -> file_descr = "unix_dup"
 external dup2 : file_descr -> file_descr -> unit = "unix_dup2"
 
 external set_nonblock : file_descr -> unit = "unix_set_nonblock"
 external clear_nonblock : file_descr -> unit = "unix_clear_nonblock"
 
-external set_close_on_exec : file_descr -> unit = "unix_set_close_on_exec"
-external clear_close_on_exec : file_descr -> unit = "unix_clear_close_on_exec"
-
-(* FD_CLOEXEC should be supported on all Unix systems these days,
-   but just in case... *)
-let try_set_close_on_exec fd =
-  try set_close_on_exec fd; true with Invalid_argument _ -> false
+external set_close_on_exec : file_descr -> unit = "win_set_close_on_exec"
+external clear_close_on_exec : file_descr -> unit = "win_clear_close_on_exec"
 
 (* Directories *)
 
 external mkdir : string -> file_perm -> unit = "unix_mkdir"
 external rmdir : string -> unit = "unix_rmdir"
 external chdir : string -> unit = "unix_chdir"
 external getcwd : unit -> string = "unix_getcwd"
-external chroot : string -> unit = "unix_chroot"
+let chroot _ = invalid_arg "Unix.chroot not implemented"
+
+type dir_entry =
+    Dir_empty
+  | Dir_read of string
+  | Dir_toread
 
-type dir_handle
+type dir_handle =
+  { dirname: string; mutable handle: int; mutable entry_read: dir_entry }
 
-external opendir : string -> dir_handle = "unix_opendir"
-external readdir : dir_handle -> string = "unix_readdir"
-external rewinddir : dir_handle -> unit = "unix_rewinddir"
-external closedir : dir_handle -> unit = "unix_closedir"
+external findfirst : string -> string * int = "win_findfirst"
+external findnext : int -> string= "win_findnext"
+
+let opendir dirname =
+  try
+    let (first_entry, handle) = findfirst (Filename.concat dirname "*.*") in
+    { dirname = dirname; handle = handle; entry_read = Dir_read first_entry }
+  with End_of_file ->
+    { dirname = dirname; handle = 0; entry_read = Dir_empty }
+
+let readdir d =
+  match d.entry_read with
+    Dir_empty -> raise End_of_file
+  | Dir_read name -> d.entry_read <- Dir_toread; name
+  | Dir_toread -> findnext d.handle
+
+external win_findclose : int -> unit = "win_findclose"
+
+let closedir d =
+  match d.entry_read with
+    Dir_empty -> ()
+  | _ -> win_findclose d.handle
+
+let rewinddir d =
+  closedir d;
+  try
+    let (first_entry, handle) = findfirst (d.dirname ^ "\\*.*") in
+    d.handle <- handle; d.entry_read <- Dir_read first_entry
+  with End_of_file ->
+    d.handle <- 0; d.entry_read <- Dir_empty
 
 (* Pipes *)
 
 external pipe : unit -> file_descr * file_descr = "unix_pipe"
 
+let mkfifo name perm = invalid_arg "Unix.mkfifo not implemented"
+
 (* Symbolic links *)
 
-external symlink : string -> string -> unit = "unix_symlink"
-external readlink : string -> string = "unix_readlink"
-
-external mkfifo : string -> file_perm -> unit = "unix_mkfifo"
-external select :
-  file_descr list -> file_descr list -> file_descr list -> float ->
-        file_descr list * file_descr list * file_descr list = "unix_select"
+let symlink path1 path2 = invalid_arg "Unix.symlink not implemented"
+let readlink path = invalid_arg "Unix.readlink not implemented"
 
 (* Locking *)
 
 type lock_command =
     F_ULOCK
@@ -417,19 +374,16 @@
   | F_TEST
   | F_RLOCK
   | F_TRLOCK
 
 external lockf : file_descr -> lock_command -> int -> unit = "unix_lockf"
-external kill : int -> int -> unit = "unix_kill"
+let kill pid signo = invalid_arg "Unix.kill not implemented"
 type sigprocmask_command = SIG_SETMASK | SIG_BLOCK | SIG_UNBLOCK
-external sigprocmask: sigprocmask_command -> int list -> int list
-        = "unix_sigprocmask"
-external sigpending: unit -> int list = "unix_sigpending"
-external sigsuspend: int list -> unit = "unix_sigsuspend"
-
-let pause() =
-  let sigs = sigprocmask SIG_BLOCK [] in sigsuspend sigs
+let sigprocmask cmd sigs = invalid_arg "Unix.sigprocmask not implemented"
+let sigpending () = invalid_arg "Unix.sigpending not implemented"
+let sigsuspend sigs = invalid_arg "Unix.sigsuspend not implemented"
+let pause () = invalid_arg "Unix.pause not implemented"
 
 (* Time functions *)
 
 type process_times =
   { tms_utime : float;
@@ -451,11 +405,11 @@
 external time : unit -> float = "unix_time"
 external gettimeofday : unit -> float = "unix_gettimeofday"
 external gmtime : float -> tm = "unix_gmtime"
 external localtime : float -> tm = "unix_localtime"
 external mktime : tm -> float * tm = "unix_mktime"
-external alarm : int -> int = "unix_alarm"
+let alarm n = invalid_arg "Unix.alarm not implemented"
 external sleep : int -> unit = "unix_sleep"
 external times : unit -> process_times = "unix_times"
 external utimes : string -> float -> float -> unit = "unix_utimes"
 
 type interval_timer =
@@ -465,26 +419,26 @@
 
 type interval_timer_status =
   { it_interval: float;
     it_value: float }
 
-external getitimer: interval_timer -> interval_timer_status = "unix_getitimer"
-external setitimer:
-  interval_timer -> interval_timer_status -> interval_timer_status
-  = "unix_setitimer"
+let getitimer it = invalid_arg "Unix.getitimer not implemented"
+let setitimer it tm = invalid_arg "Unix.setitimer not implemented"
 
 (* User id, group id *)
 
-external getuid : unit -> int = "unix_getuid"
-external geteuid : unit -> int = "unix_geteuid"
-external setuid : int -> unit = "unix_setuid"
-external getgid : unit -> int = "unix_getgid"
-external getegid : unit -> int = "unix_getegid"
-external setgid : int -> unit = "unix_setgid"
-external getgroups : unit -> int array = "unix_getgroups"
-external setgroups : int array -> unit = "unix_setgroups"
-external initgroups : string -> int -> unit = "unix_initgroups"
+let getuid () = 1
+let geteuid = getuid
+let setuid id = invalid_arg "Unix.setuid not implemented"
+
+let getgid () = 1
+let getegid = getgid
+let setgid id = invalid_arg "Unix.setgid not implemented"
+
+let getgroups () = [|1|]
+let setgroups _ = invalid_arg "Unix.setgroups not implemented"
+let initgroups _ _ = invalid_arg "Unix.initgroups not implemented"
 
 type passwd_entry =
   { pw_name : string;
     pw_passwd : string;
     pw_uid : int;
@@ -497,16 +451,15 @@
   { gr_name : string;
     gr_passwd : string;
     gr_gid : int;
     gr_mem : string array }
 
-
-external getlogin : unit -> string = "unix_getlogin"
-external getpwnam : string -> passwd_entry = "unix_getpwnam"
-external getgrnam : string -> group_entry = "unix_getgrnam"
-external getpwuid : int -> passwd_entry = "unix_getpwuid"
-external getgrgid : int -> group_entry = "unix_getgrgid"
+let getlogin () = try Sys.getenv "USERNAME" with Not_found -> ""
+let getpwnam x = raise Not_found
+let getgrnam = getpwnam
+let getpwuid = getpwnam
+let getgrgid = getpwnam
 
 (* Internet addresses *)
 
 type inet_addr = string
 
@@ -555,13 +508,11 @@
   | MSG_DONTROUTE
   | MSG_PEEK
 
 external socket : socket_domain -> socket_type -> int -> file_descr
                                   = "unix_socket"
-external socketpair :
-        socket_domain -> socket_type -> int -> file_descr * file_descr
-                                  = "unix_socketpair"
+let socketpair dom ty proto = invalid_arg "Unix.socketpair not implemented"
 external accept : file_descr -> file_descr * sockaddr = "unix_accept"
 external bind : file_descr -> sockaddr -> unit = "unix_bind"
 external connect : file_descr -> sockaddr -> unit = "unix_connect"
 external listen : file_descr -> int -> unit = "unix_listen"
 external shutdown : file_descr -> shutdown_command -> unit = "unix_shutdown"
@@ -685,10 +636,11 @@
 external gethostbyaddr : inet_addr -> host_entry = "unix_gethostbyaddr"
 external getprotobyname : string -> protocol_entry
                                          = "unix_getprotobyname"
 external getprotobynumber : int -> protocol_entry
                                          = "unix_getprotobynumber"
+
 external getservbyname : string -> string -> service_entry
                                          = "unix_getservbyname"
 external getservbyport : int -> string -> service_entry
                                          = "unix_getservbyport"
 
@@ -819,227 +771,92 @@
   try
     getnameinfo_system addr opts
   with Invalid_argument _ ->
     getnameinfo_emulation addr opts
 
-type terminal_io = {
-    mutable c_ignbrk: bool;
-    mutable c_brkint: bool;
-    mutable c_ignpar: bool;
-    mutable c_parmrk: bool;
-    mutable c_inpck: bool;
-    mutable c_istrip: bool;
-    mutable c_inlcr: bool;
-    mutable c_igncr: bool;
-    mutable c_icrnl: bool;
-    mutable c_ixon: bool;
-    mutable c_ixoff: bool;
-    mutable c_opost: bool;
-    mutable c_obaud: int;
-    mutable c_ibaud: int;
-    mutable c_csize: int;
-    mutable c_cstopb: int;
-    mutable c_cread: bool;
-    mutable c_parenb: bool;
-    mutable c_parodd: bool;
-    mutable c_hupcl: bool;
-    mutable c_clocal: bool;
-    mutable c_isig: bool;
-    mutable c_icanon: bool;
-    mutable c_noflsh: bool;
-    mutable c_echo: bool;
-    mutable c_echoe: bool;
-    mutable c_echok: bool;
-    mutable c_echonl: bool;
-    mutable c_vintr: char;
-    mutable c_vquit: char;
-    mutable c_verase: char;
-    mutable c_vkill: char;
-    mutable c_veof: char;
-    mutable c_veol: char;
-    mutable c_vmin: int;
-    mutable c_vtime: int;
-    mutable c_vstart: char;
-    mutable c_vstop: char
-  }
-
-external tcgetattr: file_descr -> terminal_io = "unix_tcgetattr"
-
-type setattr_when = TCSANOW | TCSADRAIN | TCSAFLUSH
-
-external tcsetattr: file_descr -> setattr_when -> terminal_io -> unit
-               = "unix_tcsetattr"
-external tcsendbreak: file_descr -> int -> unit = "unix_tcsendbreak"
-external tcdrain: file_descr -> unit = "unix_tcdrain"
-
-type flush_queue = TCIFLUSH | TCOFLUSH | TCIOFLUSH
-
-external tcflush: file_descr -> flush_queue -> unit = "unix_tcflush"
-
-type flow_action = TCOOFF | TCOON | TCIOFF | TCION
-
-external tcflow: file_descr -> flow_action -> unit = "unix_tcflow"
-
-external setsid : unit -> int = "unix_setsid"
-
 (* High-level process management (system, popen) *)
 
-let rec waitpid_non_intr pid =
-  try waitpid [] pid
-  with Unix_error (EINTR, _, _) -> waitpid_non_intr pid
-
-let system cmd =
-  match fork() with
-     0 -> begin try
-            execv "/bin/sh" [| "/bin/sh"; "-c"; cmd |]
-          with _ ->
-            exit 127
-          end
-  | id -> snd(waitpid_non_intr id)
-
-let rec safe_dup fd =
-  let new_fd = dup fd in
-  if new_fd >= 3 then
-    new_fd
-  else begin
-    let res = safe_dup fd in
-    close new_fd;
-    res
-  end
-
-let safe_close fd =
-  try close fd with Unix_error(_,_,_) -> ()
+external win_create_process : string -> string -> string option ->
+                              file_descr -> file_descr -> file_descr -> int
+                            = "win_create_process" "win_create_process_native"
+
+let make_cmdline args =
+  let maybe_quote f =
+    if String.contains f ' ' || String.contains f '\"'
+    then Filename.quote f
+    else f in
+  String.concat " " (List.map maybe_quote (Array.to_list args))
+
+let create_process prog args fd1 fd2 fd3 =
+  win_create_process prog (make_cmdline args) None fd1 fd2 fd3
+
+let create_process_env prog args env fd1 fd2 fd3 =
+  win_create_process prog (make_cmdline args)
+                     (Some(String.concat "\000" (Array.to_list env) ^ "\000"))
+                     fd1 fd2 fd3
 
-let perform_redirections new_stdin new_stdout new_stderr =
-  let newnewstdin = safe_dup new_stdin in
-  let newnewstdout = safe_dup new_stdout in
-  let newnewstderr = safe_dup new_stderr in
-  safe_close new_stdin;
-  safe_close new_stdout;
-  safe_close new_stderr;
-  dup2 newnewstdin stdin; close newnewstdin;
-  dup2 newnewstdout stdout; close newnewstdout;
-  dup2 newnewstderr stderr; close newnewstderr
-
-let create_process cmd args new_stdin new_stdout new_stderr =
-  match fork() with
-    0 ->
-      begin try
-        perform_redirections new_stdin new_stdout new_stderr;
-        execvp cmd args
-      with _ ->
-        exit 127
-      end
-  | id -> id
-
-let create_process_env cmd args env new_stdin new_stdout new_stderr =
-  match fork() with
-    0 ->
-      begin try
-        perform_redirections new_stdin new_stdout new_stderr;
-        execvpe cmd args env
-      with _ ->
-        exit 127
-      end
-  | id -> id
+external system: string -> process_status = "win_system"
 
 type popen_process =
     Process of in_channel * out_channel
   | Process_in of in_channel
   | Process_out of out_channel
   | Process_full of in_channel * out_channel * in_channel
 
 let popen_processes = (Hashtbl.create 7 : (popen_process, int) Hashtbl.t)
 
-let open_proc cmd proc input output toclose =
-  let cloexec = List.for_all try_set_close_on_exec toclose in
-  match fork() with
-     0 -> if input <> stdin then begin dup2 input stdin; close input end;
-          if output <> stdout then begin dup2 output stdout; close output end;
-          if not cloexec then List.iter close toclose;
-          begin try execv "/bin/sh" [| "/bin/sh"; "-c"; cmd |]
-          with _ -> exit 127
-          end
-  | id -> Hashtbl.add popen_processes proc id
+let open_proc cmd optenv proc input output error =
+  let shell =
+    try Sys.getenv "COMSPEC"
+    with Not_found -> raise(Unix_error(ENOEXEC, "open_proc", cmd)) in
+  let pid =
+    win_create_process shell (shell ^ " /c " ^ cmd) optenv
+                       input output error in
+  Hashtbl.add popen_processes proc pid
 
 let open_process_in cmd =
   let (in_read, in_write) = pipe() in
+  set_close_on_exec in_read;
   let inchan = in_channel_of_descr in_read in
-  begin
-    try
-      open_proc cmd (Process_in inchan) stdin in_write [in_read];
-    with e ->
-      close_in inchan;
-      close in_write;
-      raise e
-  end;
+  open_proc cmd None (Process_in inchan) stdin in_write stderr;
   close in_write;
   inchan
 
 let open_process_out cmd =
   let (out_read, out_write) = pipe() in
+  set_close_on_exec out_write;
   let outchan = out_channel_of_descr out_write in
-  begin
-    try
-      open_proc cmd (Process_out outchan) out_read stdout [out_write];
-    with e ->
-      close_out outchan;
-      close out_read;
-      raise e
-  end;
+  open_proc cmd None (Process_out outchan) out_read stdout stderr;
   close out_read;
   outchan
 
 let open_process cmd =
   let (in_read, in_write) = pipe() in
-  let fds_to_close = ref [in_read;in_write] in
-  try
-    let (out_read, out_write) = pipe() in
-    fds_to_close := [in_read;in_write;out_read;out_write];
-    let inchan = in_channel_of_descr in_read in
-    let outchan = out_channel_of_descr out_write in
-    open_proc cmd (Process(inchan, outchan)) out_read in_write
-                                           [in_read; out_write];
-    close out_read;
-    close in_write;
-    (inchan, outchan)
-  with e ->
-    List.iter close !fds_to_close;
-    raise e
-
-let open_proc_full cmd env proc input output error toclose =
-  let cloexec = List.for_all try_set_close_on_exec toclose in
-  match fork() with
-     0 -> dup2 input stdin; close input;
-          dup2 output stdout; close output;
-          dup2 error stderr; close error;
-          if not cloexec then List.iter close toclose;
-          begin try execve "/bin/sh" [| "/bin/sh"; "-c"; cmd |] env
-          with _ -> exit 127
-          end
-  | id -> Hashtbl.add popen_processes proc id
+  let (out_read, out_write) = pipe() in
+  set_close_on_exec in_read;
+  set_close_on_exec out_write;
+  let inchan = in_channel_of_descr in_read in
+  let outchan = out_channel_of_descr out_write in
+  open_proc cmd None (Process(inchan, outchan)) out_read in_write stderr;
+  close out_read; close in_write;
+  (inchan, outchan)
 
 let open_process_full cmd env =
   let (in_read, in_write) = pipe() in
-  let fds_to_close = ref [in_read;in_write] in
-  try
-    let (out_read, out_write) = pipe() in
-    fds_to_close := out_read::out_write:: !fds_to_close;
-    let (err_read, err_write) = pipe() in
-    fds_to_close := err_read::err_write:: !fds_to_close;
-    let inchan = in_channel_of_descr in_read in
-    let outchan = out_channel_of_descr out_write in
-    let errchan = in_channel_of_descr err_read in
-    open_proc_full cmd env (Process_full(inchan, outchan, errchan))
-      out_read in_write err_write [in_read; out_write; err_read];
-    close out_read;
-    close in_write;
-    close err_write;
-    (inchan, outchan, errchan)
-  with e ->
-    List.iter close !fds_to_close;
-    raise e
+  let (out_read, out_write) = pipe() in
+  let (err_read, err_write) = pipe() in
+  set_close_on_exec in_read;
+  set_close_on_exec out_write;
+  set_close_on_exec err_read;
+  let inchan = in_channel_of_descr in_read in
+  let outchan = out_channel_of_descr out_write in
+  let errchan = in_channel_of_descr err_read in
+  open_proc cmd (Some(String.concat "\000" (Array.to_list env) ^ "\000"))
+                (Process_full(inchan, outchan, errchan))
+                out_read in_write err_write;
+  close out_read; close in_write; close err_write;
+  (inchan, outchan, errchan)
 
 let find_proc_id fun_name proc =
   try
     let pid = Hashtbl.find popen_processes proc in
     Hashtbl.remove popen_processes proc;
@@ -1048,69 +865,103 @@
     raise(Unix_error(EBADF, fun_name, ""))
 
 let close_process_in inchan =
   let pid = find_proc_id "close_process_in" (Process_in inchan) in
   close_in inchan;
-  snd(waitpid_non_intr pid)
+  snd(waitpid [] pid)
 
 let close_process_out outchan =
   let pid = find_proc_id "close_process_out" (Process_out outchan) in
   close_out outchan;
-  snd(waitpid_non_intr pid)
+  snd(waitpid [] pid)
 
 let close_process (inchan, outchan) =
   let pid = find_proc_id "close_process" (Process(inchan, outchan)) in
-  close_in inchan;
-  begin try close_out outchan with Sys_error _ -> () end;
-  snd(waitpid_non_intr pid)
+  close_in inchan; close_out outchan;
+  snd(waitpid [] pid)
 
 let close_process_full (inchan, outchan, errchan) =
   let pid =
     find_proc_id "close_process_full"
                  (Process_full(inchan, outchan, errchan)) in
-  close_in inchan;
-  begin try close_out outchan with Sys_error _ -> () end;
-  close_in errchan;
-  snd(waitpid_non_intr pid)
+  close_in inchan; close_out outchan; close_in errchan;
+  snd(waitpid [] pid)
+
+(* Polling *)
+
+external select :
+  file_descr list -> file_descr list -> file_descr list -> float ->
+        file_descr list * file_descr list * file_descr list = "unix_select"
 
 (* High-level network functions *)
 
 let open_connection sockaddr =
   let sock =
     socket (domain_of_sockaddr sockaddr) SOCK_STREAM 0 in
   try
     connect sock sockaddr;
-    ignore(try_set_close_on_exec sock);
+    set_close_on_exec sock;
     (in_channel_of_descr sock, out_channel_of_descr sock)
   with exn ->
     close sock; raise exn
 
 let shutdown_connection inchan =
   shutdown (descr_of_in_channel inchan) SHUTDOWN_SEND
 
-let rec accept_non_intr s =
-  try accept s
-  with Unix_error (EINTR, _, _) -> accept_non_intr s
-
 let establish_server server_fun sockaddr =
-  let sock =
-    socket (domain_of_sockaddr sockaddr) SOCK_STREAM 0 in
-  setsockopt sock SO_REUSEADDR true;
-  bind sock sockaddr;
-  listen sock 5;
-  while true do
-    let (s, caller) = accept_non_intr sock in
-    (* The "double fork" trick, the process which calls server_fun will not
-       leave a zombie process *)
-    match fork() with
-       0 -> if fork() <> 0 then exit 0; (* The son exits, the grandson works *)
-            close sock;
-            ignore(try_set_close_on_exec s);
-            let inchan = in_channel_of_descr s in
-            let outchan = out_channel_of_descr s in
-            server_fun inchan outchan;
-            (* Do not close inchan nor outchan, as the server_fun could
-               have done it already, and we are about to exit anyway
-               (PR#3794) *)
-            exit 0
-    | id -> close s; ignore(waitpid_non_intr id) (* Reclaim the son *)
-  done
+  invalid_arg "Unix.establish_server not implemented"
+
+(* Terminal interface *)
+
+type terminal_io = {
+    mutable c_ignbrk: bool;
+    mutable c_brkint: bool;
+    mutable c_ignpar: bool;
+    mutable c_parmrk: bool;
+    mutable c_inpck: bool;
+    mutable c_istrip: bool;
+    mutable c_inlcr: bool;
+    mutable c_igncr: bool;
+    mutable c_icrnl: bool;
+    mutable c_ixon: bool;
+    mutable c_ixoff: bool;
+    mutable c_opost: bool;
+    mutable c_obaud: int;
+    mutable c_ibaud: int;
+    mutable c_csize: int;
+    mutable c_cstopb: int;
+    mutable c_cread: bool;
+    mutable c_parenb: bool;
+    mutable c_parodd: bool;
+    mutable c_hupcl: bool;
+    mutable c_clocal: bool;
+    mutable c_isig: bool;
+    mutable c_icanon: bool;
+    mutable c_noflsh: bool;
+    mutable c_echo: bool;
+    mutable c_echoe: bool;
+    mutable c_echok: bool;
+    mutable c_echonl: bool;
+    mutable c_vintr: char;
+    mutable c_vquit: char;
+    mutable c_verase: char;
+    mutable c_vkill: char;
+    mutable c_veof: char;
+    mutable c_veol: char;
+    mutable c_vmin: int;
+    mutable c_vtime: int;
+    mutable c_vstart: char;
+    mutable c_vstop: char
+  }
+
+type setattr_when = TCSANOW | TCSADRAIN | TCSAFLUSH
+
+let tcgetattr fd = invalid_arg "Unix.tcgetattr not implemented"
+let tcsetattr fd wh = invalid_arg "Unix.tcsetattr not implemented"
+let tcsendbreak fd n = invalid_arg "Unix.tcsendbreak not implemented"
+let tcdrain fd = invalid_arg "Unix.tcdrain not implemented"
+
+type flush_queue = TCIFLUSH | TCOFLUSH | TCIOFLUSH
+let tcflush fd q = invalid_arg "Unix.tcflush not implemented"
+type flow_action = TCOOFF | TCOON | TCIOFF | TCION
+let tcflow fd fl = invalid_arg "Unix.tcflow not implemented"
+let setsid () = invalid_arg "Unix.setsid not implemented"
